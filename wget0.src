
※mind wget0 socketlib

通信データは　構造体
　通信文字列は　文字列実体　長さ　１２８
　全体は　通信文字列
。

エラー検査とは
　エラー？
　ならば
　　エラー文字列で　重大エラー
　つぎに
。

メインとは
　ホスト名は　文字列
　ポート番号は　変数
　ソケットは　変数
　未接続状態は　変数
　合否は　変数
　打ち切り要求は　変数
　エラー文字列退避は　文字列実体　長さ　エラー文字列長さ
　「https://qiita.com」を　ホスト名に　入れ
　80を　ポート番号に　入れ
　改行し
　「ホスト名 」を　表示し　ホスト名を　表示し
　「 に 」を　表示し
　ポート番号を　数値表示し　「 番ポートで接続。」を　一行表示し
　ホスト名と　ポート番号で　ｃｏｎｎｅｃｔ・非同期し　ソケットと　未接続状態に　入れ
　「ソケット = 」を　表示し　ソケットを　数値表示し　改行し
　エラー？
　ならば
　　「エラー：」を　表示し　エラー文字列を　一行表示し
　つぎに
　未接続状態
　ならば
　　「接続完了を待つ」を　一行表示し
　　ソケットと　１０秒で　接続完了を待ち　偽？
　　ならば
　　　「接続失敗」を　一行エラー出力し
　　　ソケットを　ハンドル指定でクローズし
　　　終り
　　つぎに
　　「接続完了。ソケット = 」を　表示し　ソケットを　数値表示し　改行し
　　改行し
　つぎに
　「キーボードから何か入力すると相手側に送信します」続
　「(終了はEnterのみ)。」を　一行表示し
　「相手側から何か受信するとコンソールに表示します。」を　一行表示し
　改行し
　打ち切り要求を　クリアし
　ここから
　入力検査フラグ初期化し
　０で　入力検査フラグをセットし　（キー入力有り）
　　ソケットで　入力検査フラグをセットし　（受信データ有り）
　　０秒で　入力検査し　偽？
　　ならば
　　　もう一度
　　つぎに
　　０が　入力可能？
　　ならば
　　　「GET / HTTP/1.1」を　通信文字列に　入れ
　　　通信データを　ソケットに　ハンドル指定で書き込み
　　　打ち切り要求が　真？
　　　ならば
　　　　打ち切り
　　　つぎに
　　さもなければ
　　　ソケットで　入力可能？
　　　ならば
　　　　ソケットと　−１と　通信データへ
　　　　ハンドルとサイズ指定で構造体に読み出し
　　　　データ終り？　または　読み出しバイト数が　ゼロ？
　　　　ならば
　　　　　「接続が切られました。」を　一行表示し
　　　　　打ち切り要求を　セットし
　　　　　終り
　　　　つぎに
　　　　「相手から：」を　表示し　通信文字列を　一行表示し
　　　つぎに
　　つぎに
　　打ち切り要求が　真？
　　ならば
　　　打ち切り
　　つぎに
　繰り返し
　ソケットを　ハンドル指定でクローズし
　「終わります。」を　一行表示し
。





